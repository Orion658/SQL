mysql -u <username> -p  //username == root || password == root

CREATE DATABASE your_database_name;

USE your_database_name;

source /path/to/your/file.sql;

mysql -u <username> -p your_database_name < /path/to/your/file.sql


Assuming the structure of the tables:

STUDENT table with columns: STUDENT_NO, FORENAME, SURNAME
MODULE table with columns: MODULE_ID, MODULE_NAME
MARKS table with columns: STUDENT_NO, MODULE_ID, MARK

///////*************************************************************////////////////////////////////////////

    <<<CREATING TEST DATABASE>>>

-- Create the database
CREATE DATABASE IF NOT EXISTS university;

-- Switch to the university database
USE university;

-- Create the STUDENT table
CREATE TABLE IF NOT EXISTS STUDENT (
    STUDENT_NO INT PRIMARY KEY,
    FORENAME VARCHAR(255),
    SURNAME VARCHAR(255)
);

-- Create the MODULE table
CREATE TABLE IF NOT EXISTS MODULE (
    MODULE_ID INT PRIMARY KEY,
    MODULE_NAME VARCHAR(255)
);

-- Create the MARKS table
CREATE TABLE IF NOT EXISTS MARKS (
    STUDENT_NO INT,
    MODULE_ID INT,
    MARK INT,
    PRIMARY KEY (STUDENT_NO, MODULE_ID),
    FOREIGN KEY (STUDENT_NO) REFERENCES STUDENT (STUDENT_NO),
    FOREIGN KEY (MODULE_ID) REFERENCES MODULE (MODULE_ID)
);


-- Insert sample data into STUDENT table
INSERT INTO STUDENT VALUES (1, 'John', 'Doe');
INSERT INTO STUDENT VALUES (2, 'Jane', 'Smith');
-- Add more rows as needed

-- Insert sample data into MODULE table
INSERT INTO MODULE VALUES (1, 'DATABASES');
INSERT INTO MODULE VALUES (2, 'MATH');
-- Add more rows as needed

-- Insert sample data into MARKS table
INSERT INTO MARKS VALUES (1, 1, 85);
INSERT INTO MARKS VALUES (1, 2, 75);
INSERT INTO MARKS VALUES (2, 1, 90);
-- Add more rows as needed

//////////////////////********************************************//////////////////////////////////


///1. Display Student No. and Total Marks of Each Student Having Total Marks Greater Than 160:

SELECT STUDENT_NO, SUM(MARK) AS TOTAL_MARKS
FROM MARKS
GROUP BY STUDENT_NO
HAVING TOTAL_MARKS > 160;



///2. Display Student Name (Forename + Surname), Module Name, and Mark of Students Having Mark Greater Than the Mark of Emile Zola in the Databases Module Using Joins:

SELECT CONCAT(S.FORENAME, ' ', S.SURNAME) AS STUDENT_NAME, M.MODULE_NAME, MK.MARK
FROM STUDENT S
JOIN MARKS MK ON S.STUDENT_NO = MK.STUDENT_NO
JOIN MODULE M ON MK.MODULE_ID = M.MODULE_ID
WHERE M.MODULE_NAME = 'DATABASES'
  AND MK.MARK > (SELECT MARK FROM STUDENT ST
                 JOIN MARKS MKS ON ST.STUDENT_NO = MKS.STUDENT_NO
                 WHERE ST.FORENAME = 'Emile' AND ST.SURNAME = 'Zola' AND MKS.MODULE_ID = M.MODULE_ID);

///3. Create a Foreign Key Constraint on the ‘STUDENT_NO’ Column of the MARKS Table Assuming ‘STUDENT_NO’ is the Primary Key of the STUDENT Table:

ALTER TABLE MARKS
ADD CONSTRAINT fk_student_no
FOREIGN KEY (STUDENT_NO)
REFERENCES STUDENT (STUDENT_NO);


///4. Write a Function to Take the Input as Mark and Return the Grade:

DELIMITER //
CREATE FUNCTION GetGrade(mark INT) RETURNS CHAR
BEGIN
  DECLARE grade CHAR;
  
  IF mark >= 80 THEN
    SET grade = 'A';
  ELSEIF mark >= 65 AND mark < 80 THEN
    SET grade = 'B';
  ELSEIF mark >= 50 AND mark < 65 THEN
    SET grade = 'C';
  ELSE
    SET grade = 'FAIL';
  END IF;
  
  RETURN grade;
END //
DELIMITER ;

------------------------------------
You can use the function like this:

SELECT GetGrade(75) AS Grade;

///5. Write a Stored Procedure to Display All the Tables Whose Name Starts With M:


DELIMITER //
CREATE PROCEDURE ShowTablesStartingWithM()
BEGIN
  SELECT TABLE_NAME
  FROM INFORMATION_SCHEMA.TABLES
  WHERE TABLE_SCHEMA = 'your_database_name' -- Replace with your actual database name
    AND TABLE_NAME LIKE 'M%';
END //
DELIMITER ;

----------------------------
You can call the stored procedure like this:

CALL ShowTablesStartingWithM();



///////************************** MONGODB *******************************\\\\\\\

Q2. IMPORT THE EMP.CSV FILE AND SOLVE THE FOLLOWING QUERIES USING MONGODB –


1. DISPLAY EMPLOYEE NAME WHOSE SALARY(SAL) GREATER THAN 2000. 

mongoDB> db.emp.find({"SAL": { "$gt": 2000 }})


2. INSERT A RECORD IN THE EMP COLLECTION. (ASSUME EMPLOYEE DETAILS) 

mongoDB> db.emp.insertOne({
  // Replace these with your employee details
  "NAME": "John Doe",
  "SAL": 3000,
  "DEPT": "Marketing",
  // Add any other relevant fields with their values
})


3. DELETE THE RECORD OF THE EMPLOYEE WHOSE NAME IS FORD.

mongoDB> db.emp.deleteOne({ "NAME": "Ford" })

